EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
DeathFromAbove.exe -- emu8086 assembler version: 4.08  
 
[ 11/26/2017  --  8:47:15 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       
[   2]        :                                       
[   3]        :                                       ;---------------------------------------------------------------------------------------------------------------------------------------------
[   4]        :                                       .model medium
[   5]        :                                       .stack 64
[   6]        :                                       ;---------------------------------------------------------------------------------------------------------------------------------------------
[   7]        :                                       .data
[   8]    0040: 23 00 2D 00 32 00 37 00 41 00         charx   dw  35,45,50,55,65  ;RUx, RFx, COMx, LFx, LUx
[   9]    004A: 1E 00 3C 00 32 00 3C 00 1E 00         charY   dw  30,60,50,60,30 ;RUy, RFy, COMy, LFy, LUy
[  10]        :                                       ;---------------------------------------------------------------------------------------------------------------------------------------------
[  11]        :                                       .code
[  12]    0060:                                       main    proc far
[  13]    0060: B8 04 00                              mov ax, @data
[  14]    0063: 8E D8                                 mov ds, ax
[  15]    0065: B4 00                                 mov ah, 0
[  16]    0067: B0 13                                 mov al, 13h
[  17]    0069: CD 10                                 int 10h
[  18]        :                                       
[  19]        :                                       ;R = 30
[  20]        :                                       ;X 10 -> 40
[  21]        :                                       ;Y = sqrt(R2 - X2)
[  22]    006B: B0 1E                                 mov al, 30
[  23]    006D: 8A D8                                 mov bl, al
[  24]    006F: F6 E3                                 mul bl
[  25]    0071: 8B D8                                 mov bx, ax ;bx = R2
[  26]    0073: B2 00                                 mov dl, 0 ;cx = X
[  27]        :                                       
[  28]        :                                       
[  29]    0075:                                       HCLoop:
[  30]    0075: 8A C2                                 mov al, dl
[  31]    0077: F6 E2                                 mul dl     ;ax = X2
[  32]        :                                       
[  33]    0079: 53                                    push bx
[  34]    007A: 2B D8                                 sub bx, ax
[  35]    007C: 8B D3                                 mov dx, bx
[  36]    007E: E8 1D 00                              call sqrt   ;bl = Y
[  37]        :                                       
[  38]        :                                       
[  39]    0081: 8A CB                                 mov cl, bl
[  40]    0083: B6 00                                 mov dh,0
[  41]    0085: B5 00                                 mov ch,0
[  42]        :                                       ;-----------------------------
[  43]        :                                       ;Draw Pixel
[  44]        :                                       ;-----------------------------
[  45]    0087: 80 C2 28                              add dl, 40
[  46]    008A: B0 05                                 mov al,5 ;Pixel color
[  47]    008C: B4 0C                                 mov ah,0ch ;Draw Pixel Command
[  48]    008E: CD 10                                 int 10h
[  49]        :                                       
[  50]    0090: 80 EA 28                              sub dl, 40
[  51]        :                                       
[  52]        :                                       
[  53]        :                                       
[  54]    0093: FE C2                                 inc dl
[  55]    0095: 80 FA 64                              cmp dl, 100
[  56]    0098: 5B                                    pop bx
[  57]    0099: 75 DA                                 jne HCLoop
[  58]        :                                       
[  59]        :                                       
[  60]        :                                       
[  61]        :                                       
[  62]        :                                       
[  63]        :                                       
[  64]    009B:                                       MainLoop:
[  65]        :                                       
[  66]        :                                       
[  67]        :                                       
[  68]    009B: EB FE                                 jmp MainLoop
[  69]        :                                       
[  70]    009D: F4                                    hlt
[  71]        :                                       main        endp
[  72]        :                                       ;--------------------------------------------------------------------------------------------------------------------------------------------
[  73]        :                                       
[  74]        :                                       
[  75]        :                                       
[  76]        :                                       
[  77]        :                                       
[  78]        :                                       
[  79]        :                                       
[  80]        :                                       
[  81]        :                                       
[  82]    009E:                                       sqrt proc
[  83]        :                                       ;bl = sqrt(dx)
[  84]    009E: 51                                    push cx
[  85]    009F: B8 00 00                              mov ax, 0
[  86]    00A2: B3 00                                 mov bl, 0
[  87]    00A4: B9 00 00                              mov cx, 0
[  88]        :                                       
[  89]        :                                       
[  90]    00A7:                                       LOOP1:
[  91]    00A7: 8A C3                                 mov al, bl
[  92]    00A9: F6 E3                                 	mul bl		; C = B*B       CX = C, bl=B
[  93]    00AB: 8B C8                                 	    mov cx, ax
[  94]        :                                       	
[  95]    00AD: 3B CA                                 	    cmp cx, dx      ; Compare C to A
[  96]    00AF: 7F 05                                 	    jg fin			; If C > A Branch to the end
[  97]        :                                       
[  98]    00B1: 80 C3 01                              	    ADD bl, 1		; B = B + 1
[  99]        :                                       
[ 100]    00B4: EB F1                                 	    jmp LOOP1		; Go back to the beginning of the loop
[ 101]    00B6:                                       fin:
[ 102]    00B6: 80 EB 01                              sub bl , 1		; B = B-1
[ 103]    00B9: 59                                    pop cx
[ 104]        :                                       
[ 105]    00BA: C3                                    ret
[ 106]        :                                       
[ 107]        :                                       endp sqrt
[ 108]        :                                       
[ 109]        :                                       
[ 110]        :                                       
[ 111]        :                                       end         main
[ 112]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: BB      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 40      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: 22      -   check sum (l.byte)
0013: 24      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 06      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 06      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
